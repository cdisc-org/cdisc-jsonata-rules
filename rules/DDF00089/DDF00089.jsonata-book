[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00089/DDF00089.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study_v3.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a second study design as a copy of the first        *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.**.studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($old_study.**.studyDesigns[0],$idmap);\r\n    $new_study1 := $old_study ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|;\r\n    \r\n    /***********************************************************************\\\r\n    * Create a characteristic as a modified copy of the first eligilibility *\r\n    * criterion item                                                        *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap2 := $utils.get_idmap($new_study1.study.versions[0].studyDesigns[0].population.criteria[0],$maxids);\r\n    $new_char := $utils.make_dup($new_study1.study.versions[0].studyDesigns[0].population.criteria[0],$idmap2) ~> |$|\r\n        {\r\n            \"id\": \"Characteristic_1\",\r\n            \"name\": \"CHAR1\",\r\n            \"dictionaryId\": $lookup($idmap,dictionaryId),\r\n            \"instanceType\": \"Characteristic\"\r\n        },[\"category\",\"identifier\",\"nextId\",\"previousId\",\"contextId\"]|;\r\n\r\n    /***********************************************************************\\\r\n    * Create a copy of the first study design's population and insert it as *\r\n    * the first cohort for the (new) second study design.                   *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.**.studyDesigns[0].population,$maxids);\r\n    $new_cohort1 := $utils.make_dup($new_study1.**.studyDesigns[0].population,$idmap) ~> |$|\r\n        {\r\n            \"id\": \"StudyCohort_1\",\r\n            \"name\": \"COHORT1\",\r\n            \"characteristics\": [$new_char],\r\n            \"instanceType\": \"StudyCohort\"\r\n        },[\"plannedSex\",\"plannedEnrollmentNumber\",\"plannedCompletionNumber\",\"criteria\",\"cohorts\"]| ~> |plannedAge|{\"maxValue\": 75}|;\r\n    $new_study2 := $new_study1 ~> |study.versions[0].studyDesigns[1].population|{\"cohorts\": $append(cohorts,$new_cohort1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Duplicate the cohort created in the previous step to create the       *\r\n    * second cohort for the (new) second study design.                      *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study2);\r\n    $idmap := $utils.get_idmap($new_study2.**.studyDesigns[1].population.cohorts[0],$maxids);\r\n    $new_cohort2 := $utils.make_dup($new_study2.**.studyDesigns[1].population.cohorts[0],$idmap) ~> |$|\r\n        {\r\n            \"name\": \"COHORT2\"\r\n        }| ~> |plannedAge|{\"minValue\": 76}| ~> |plannedAge|{\"maxValue\": 100}| ~>\r\n        |characteristics[0]|{\"name\": \"CHAR2\"}|;\r\n    $new_study3 := $new_study2 \r\n                    ~> |study.versions[0].studyDesigns[1].population|{\"cohorts\": $append(cohorts,$new_cohort2)},[\"plannedAge\"]|;\r\n                    \r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00089/unit-test-coreid-DDF00089-positive.json\",$new_study3);\r\n    \r\n    /***********************************************************************\\\r\n    * Add the following invalid references and then write out as negative   *\r\n    * unit test data:                                                       *\r\n    * - An EligibilityCriterion with a parameter referenace but         *\r\n    *   dictionaryId is null                                                *\r\n    * - A cohort Characteristic with a parameter reference but the          *\r\n    *   dictionaryId attribute is missing                                   *\r\n    * - A Condition with a parameter reference where the dictionaryId is    *\r\n    *   invalid                                                             *\r\n    * - An Objective with a referenced parameter name that does not have a  *\r\n    *   parameter map in the specified dictionary                           *\r\n    * - An Endpoint with a referenced parameter name that does not have a   *\r\n    *   parameter map in the specified dictionary                           *\r\n    \\***********************************************************************/\r\n    $new_study4 :=  $new_study3\r\n                    ~> |study.versions[0].studyDesigns[1].population.criteria[0]|\r\n                        {\r\n                            \"dictionaryId\": null\r\n                        }|\r\n                    ~> |study.versions[0].studyDesigns[1].population.cohorts[1].characteristics[0]|\r\n                        {},[\"dictionaryId\"]|\r\n                    ~> |study.versions[0].studyDesigns[1].conditions[1]|\r\n                        {\r\n                            \"text\": $replace(text,/Visit 1/,\"<usdm:tag name=\\\"qrs_vis\\\"/>\"),\r\n                            \"dictionaryId\": \"SyntaxTemplateDictionary_xx\"\r\n                        }|\r\n                    ~> |study.versions[0].studyDesigns[1].objectives[0]|\r\n                        {\r\n                            \"text\": $replace(text,/0.05/,\"<usdm:tag name=\\\"erroralpha\\\"/>\"),\r\n                            \"dictionaryId\": \"SyntaxTemplateDictionary_3\"\r\n                        }|\r\n                    ~> |study.versions[0].studyDesigns[1].objectives[0].endpoints[1]|\r\n                        {\r\n                            \"text\": $replace(text,/Week 24/,\"<usdm:tag name=\\\"cibic_vis\\\"></usdm:tag>\"),\r\n                            \"dictionaryId\": \"SyntaxTemplateDictionary_4\"\r\n                        }|;\r\n    $writeFile(\"./rules/DDF00089/unit-test-coreid-DDF00089-negative.json\",$new_study4);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00089/unit-test-coreid-DDF00089-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00089/unit-test-coreid-DDF00089-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]