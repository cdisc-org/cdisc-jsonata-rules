{
    "rule": {
        "Authorities": [
            {
                "Organization": "CDISC",
                "Standards": [
                    {
                        "Name": "USDM",
                        "References": [
                            {
                                "Citations": [
                                    {
                                        "Document": "USDM_CORE_Rules.xlsx",
                                        "Cited_Guidance": "Any parameter name referenced in a tag in the text should be specified in the data dictionary parameter maps."
                                    }
                                ],
                                "Origin": "USDM Conformance Rules",
                                "Version": "1.0",
                                "Rule_Identifier": {
                                    "Id": "DDF00089",
                                    "Version": "1"
                                }
                            }
                        ],
                        "Version": "3.0"
                    }
                ]
            }
        ],
        "Check": {
            "all": [
                {
                    "operator": "($data.**.study.versions)@$sv.\n    ($sv.studyDesigns)@$sd.($sd.**[$contains(text,/usdm:tag/)])@$st.\n        (\n            $dict := $sd.dictionaries[id=$st.dictionaryId];\n            $valid_tags := $dict.parameterMaps.tag;\n            $param_maps := $dict.parameterMaps.{\"id\": id, \"tag\": tag};\n            $match ($st.text,\n                        /<usdm:tag((?=[^>]* name=\\\"(\\w+)\\\")[^>]*)(\\/>|><\\/usdm:tag>)/\n            )   [\n                    $not(\n                        $st.dictionaryId and\n                        $dict and\n                        groups[1] in $valid_tags\n                    )\n                ].\n                {\n                    \"id\": $st.id,\n                    \"name\": $st.name,\n                    \"text\": $st.text,\n                    \"parameter\": {\n                                    \"reference\": match,\n                                    \"name\": groups[1]\n                                },\n                    \"dictionaryId\": $st.dictionaryId,\n                    \"dictionary\": $st.dictionaryId \n                                    ? $dict\n                                        ?   {\n                                                \"id\": $st.dictionaryId,\n                                                \"name\": $dict.name,\n                                                \"parameterMaps\": $param_maps}\n                                        : \"[The dictionaryId is invalid]\"\n                                    : \"[The dictionaryId is missing]\",\n                    \"instanceType\": $st.instanceType,\n                    \"path\": $utils.get_path($st,$data)\n                }\n        )"
                }
            ]
        },
        "Core": {
            "Id": "",
            "Status": "Draft",
            "Version": "1"
        },
        "Description": "Any parameter name referenced in a tag in the text should be specified in the data dictionary parameter maps.",
        "Executability": "Fully Executable",
        "Outcome": {
            "Message": "The parameter name referenced in the text is not specified in the data dictionary parameter map - the dictionaryId is missing or invalid, or the parameter name does not match a tag in any of the dictionary's parameter maps.",
            "Output_Variables": [
                "id",
                "name",
                "text",
                "parameter",
                "dictionaryId",
                "dictionary",
                "path"
            ]
        },
        "Scope": {
            "Entities": {
                "Include": [
                    "EligibilityCriterion",
                    "Characteristic",
                    "Condition",
                    "Objective",
                    "Endpoint"
                ]
            }
        },
        "Sensitivity": "Record",
        "Rule_Type": "JSONata"
    },
    "datasets": [],
    "codelists": []
}