[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00204/DDF00204.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a new version for the second study definition       *\r\n    * document.                                                             *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.documentedBy[1].versions[0],$maxids);\r\n    $new_sddv := $utils.make_dup($old_study.study.documentedBy[1].versions[0],$idmap)\r\n                ~> |$|  {\"version\": \"3\"}|;\r\n    $new_study1 :=  $old_study\r\n                    ~> |study.documentedBy[1]|{\"versions\": $append(versions,$new_sddv)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00204/unit-test-coreid-DDF00204-positive.json\",$new_study1);\r\n    \r\n    /***********************************************************************\\\r\n    * Add the following and then write out as negative unit test data:      *\r\n    * - An invalid nextId (from a different document and version) to the    *\r\n    *   first narrative content of the first version of the first document  *\r\n    * - An invalid previousId (from a different version of the same         *\r\n    *   document) and an invalid childId (no matching narrative content) to *\r\n    *   the third narrative content of the first version of the second      *\r\n    *   document.                                                           *\r\n    \\***********************************************************************/\r\n    $new_study2 :=  $new_study1\r\n                    ~> |study.documentedBy[0].versions[0].contents[0]|{\"nextId\": $new_sddv.contents[1].id}|\r\n                    ~> |study.documentedBy[1].versions[0].contents[2]|{\"previousId\": $new_sddv.contents[2].previousId,\"childIds\": $append(childIds,[\"NarrativeContent_xx\"])}|;\r\n    $writeFile(\"./rules/DDF00204/unit-test-coreid-DDF00204-negative.json\",$new_study2);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00204/unit-test-coreid-DDF00204-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00204/unit-test-coreid-DDF00204-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]