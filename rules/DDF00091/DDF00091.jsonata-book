[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00091/DDF00091.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the v4 CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study1 :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-positive-1.json\",$old_study1);\r\n    \r\n    /***********************************************************************\\\r\n    * Make the following changes and write out as negative unit test data:  *\r\n    * - Add the condition's id and an invalid id to the first condition.    *\r\n    * - Add the id of an invalid instance type to the second condition.     *\r\n    \\***********************************************************************/\r\n    $new_study2 :=  $old_study1\r\n                    ~> |study.versions[0].conditions[0]|\r\n                        {\r\n                            \"appliesToIds\": $append(appliesToIds, [id,\"InvalidId_1\"])\r\n                        }|\r\n                    ~> |study.versions[0].conditions[1]|\r\n                        {\r\n                             \"appliesToIds\": $append(appliesToIds, [\"Timing_1\"])\r\n                        }|;\r\n                        \r\n    $writeFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-negative-1.json\",$new_study2);\r\n\r\n    /***********************************************************************\\\r\n    * Use the v3 CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study2 :=  $loadFile(\"./testdata/CDISC_Pilot_Study_v3.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-positive-2.json\",$old_study2);\r\n\r\n    /***********************************************************************\\\r\n    * Make the following changes and write out as negative unit test data:  *\r\n    * - Add the condition's id and an invalid id to the first condition.    *\r\n    * - Add the id of an invalid instance type to the second condition.     *\r\n    \\***********************************************************************/\r\n    $new_study3 :=  $old_study2\r\n                    ~> |study.versions[0].studyDesigns[0].conditions[0]|\r\n                        {\r\n                            \"appliesToIds\": $append(appliesToIds, [id,\"InvalidId_1\"])\r\n                        }|\r\n                    ~> |study.versions[0].studyDesigns[0].conditions[1]|\r\n                        {\r\n                             \"appliesToIds\": $append(appliesToIds, [\"Timing_1\"])\r\n                        }|;\r\n                        \r\n    $writeFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-negative-2.json\",$new_study3);\r\n\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data - v4","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-positive-1.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data - v4","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-negative-1.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data - v3","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-positive-2.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data - v3","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00091/unit-test-coreid-DDF00091-negative-2.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]