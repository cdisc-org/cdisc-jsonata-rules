[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00193/DDF00193.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point, but change blinding schema *\r\n    \\***********************************************************************/\r\n\r\n    $old_study := $loadFile(\"./testdata/CDISC_Pilot_Study.json\")\r\n                  ~> |study.versions[0].studyDesigns[0].blindingSchema.standardCode|{\"code\": \"C28233\", \"decode\": \"SINGLE BLIND\"}|;\r\n    $old_svid := $old_study.study.versions[0].id;\r\n    $old_sdid := $old_study.study.versions[0].studyDesigns[0].id;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design                    *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($old_study.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|{\"name\": \"Study Design 2\", \"description\": \"A secondary design for the study\"}|;\r\n    $new_study1 := $old_study\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|\r\n                ~> |study.versions[0].roles[0]|{\"appliesToIds\": [$old_svid]}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design as an              *\r\n    * observational study design.                                           *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd1 := $utils.make_dup($new_study1.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|{\r\n                        \"id\": \"ObservationalStudyDesign_1\",\r\n                        \"instanceType\": \"ObservationalStudyDesign\",\r\n                        \"name\": \"Study Design 3\",\r\n                        \"description\": \"An observational design for the study\",\r\n                        \"timePerspective\": (blindingSchema ~> |standardCode|{\"code\": \"C15273\",\"decode\": \"PROSPECTIVE\"}|)\r\n                      },[\"blindingSchema\",\"intentTypes\",\"subTypes\"]|\r\n                ~> |studyType|{\"code\": \"C16084\", \"decode\": \"OBSERVATIONAL\"}|\r\n                ~> |model|{\"code\": \"C15208\", \"decode\": \"COHORT\"}|;\r\n    $new_study2 := $new_study1\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first role, changing to study subject *\r\n    * and applying to only the first 2 study designs, then remove masking   *\r\n    * from first role.                                                      *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study2);\r\n    $idmap := $utils.get_idmap($new_study2.study.versions[0].roles[0],$maxids);\r\n    $new_role := $utils.make_dup($new_study2.study.versions[0].roles[0],$idmap)\r\n                ~> |$|{\"name\": \"ROLE_2\", \"label\": \"Subject\", \"appliesToIds\": [$old_sdid, $new_sd.id]}|\r\n                ~> |code|{\"code\": \"C41189\", \"decode\": \"Study Subject\"}|;\r\n    $new_study3 := $new_study2 ~> |study.versions[0]|{\"roles\": $append(roles,$new_role)}|\r\n                    ~> |study.versions[0].roles[0]|{},[\"masking\"]|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data in which there are 2 roles:      *\r\n    * - ROLE_1 (Sponsor), no masking, applicable to all study designs       *\r\n    * - ROLE_2 (Subject), masking, applicable to the first 2 study designs  *\r\n    * Note that the observational study design has no blinding schema so it *\r\n    * is ignored.                                                           *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00193/unit-test-coreid-DDF00193-positive.json\",$new_study3);\r\n    \r\n    /***********************************************************************\\\r\n    * Make the second role apply only to the second study design write out  *\r\n    * as negative unit test data in which the first study design will have  *\r\n    * no applicable masked roles.                                           *\r\n    \\***********************************************************************/\r\n    $new_study4 := $new_study3\r\n                    ~> |study.versions[0].roles[1]|{\"appliesToIds\": [$new_sd.id]}|;\r\n    $writeFile(\"./rules/DDF00193/unit-test-coreid-DDF00193-negative.json\",$new_study4);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00193/unit-test-coreid-DDF00193-positive.json\");\r\n    $utils.report($rule,$pos_data)\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00193/unit-test-coreid-DDF00193-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]