[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/get_ref_value.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00124/DDF00124.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a new parameter map with a static value.            *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.versions[0].dictionaries[0].parameterMaps[0],$maxids);\r\n    $new_pm := $utils.make_dup($old_study.study.versions[0].dictionaries[0].parameterMaps[0],$idmap)\r\n                ~> |$|  {\"tag\": \"static_val\",\"reference\": \"A static text value\"}|;\r\n    $new_study1 :=  $old_study\r\n                    ~> |study.versions[0].dictionaries[0]|{\"parameterMaps\": $append(parameterMaps,$new_pm)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a new parameter map with a valid usdm:ref which has *\r\n    * the klass/id/attribute parameters in a different order.               *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.study.versions[0].dictionaries[0].parameterMaps[0],$maxids);\r\n    $new_pm1 := $utils.make_dup($new_study1.study.versions[0].dictionaries[0].parameterMaps[0],$idmap)\r\n                ~> |$|  {\"tag\": \"ref_order\",\"reference\": \"<usdm:ref attribute=\\\"label\\\" klass=\\\"Activity\\\" id=\\\"Activity_9\\\"></usdm:ref>\"}|;\r\n    $new_study2 :=  $new_study1\r\n                    ~> |study.versions[0].dictionaries[1]|{\"parameterMaps\": $append(parameterMaps,$new_pm1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00124/unit-test-coreid-DDF00124-positive.json\",$new_study2);\r\n    \r\n    /***********************************************************************\\\r\n    * Add the following invalid references and then write out as negative   *\r\n    * unit test data:                                                       *\r\n    * - A partial usdm:ref where the klass specification is missing         *\r\n    * - An invalid usdm:ref where the referenced id value does not exist    *\r\n    \\***********************************************************************/\r\n    $new_study3 :=  $new_study2\r\n                    ~> |study.versions[0].dictionaries[1].parameterMaps[id=$new_pm1.id]|\r\n                        {\r\n                            \"tag\": \"partial_ref\",\r\n                            \"reference\": \"<usdm:ref attribute=\\\"label\\\" id=\\\"Activity_9\\\"></usdm:ref>\"\r\n                        }|\r\n                    ~> |study.versions[0].dictionaries[1].parameterMaps[0]|{\"reference\": $replace(reference,/Activity_(\\d+)/,\"Activity_xx\")}|;\r\n    $writeFile(\"./rules/DDF00124/unit-test-coreid-DDF00124-negative.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00124/unit-test-coreid-DDF00124-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00124/unit-test-coreid-DDF00124-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]