[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/add_path.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"\r\n$rule := $utils.get_rule($import(\"./rules/DDF00010/DDF00010.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the v4 CDISC Pilot data as a start point                          *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Write out as negative unit test data (original file contains          *\r\n    * duplicate names).                                                     *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00010/unit-test-coreid-DDF00010-negative.json\",$old_study);\r\n\r\n    /***********************************************************************\\\r\n    * Generate replace duplicate names with unique names and write out as   *\r\n    * positive unit test data.                                              *\r\n    \\***********************************************************************/\r\n\r\n    $iid:=0;\r\n    $iidd := $old_study ~> |**.*[id]|{\"iid\": $iid:=$iid+1}|;   \r\n    $dups := ($iidd).**.*[id and instanceType and name].$\r\n        {\r\n            instanceType: {\r\n                name: [$.{\"id\":id, \"name\":name,\"iid\": iid}]\r\n            } ~> $sift(function($v,$k){$count($v)>1})\r\n         };\r\n    $nnlkup:=$each($dups,function($v1){$each($v1,function($v2,$k2){$map($v2,function($v3,$i){{$v3.id: $k2 & \"_\" & $string($number($i)+1)}})~>$merge})~>$merge})~>$merge;\r\n    $new_study := $old_study ~> |**.*[id in $keys($nnlkup)]|{\"name\":$lookup($nnlkup,id)}|;\r\n\r\n    $writeFile(\"./rules/DDF00010/unit-test-coreid-DDF00010-positive.json\",$new_study);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00010/unit-test-coreid-DDF00010-positive.json\");\r\n    $utils.report($rule,$pos_data)\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00010/unit-test-coreid-DDF00010-negative.json\");\r\n    $utils.report($rule,$neg_data)    \r\n)","outputs":[]}]