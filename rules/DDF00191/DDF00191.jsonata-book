[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00191/DDF00191.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study := $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design, making it open    *\r\n    * label                                                                 *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($old_study.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|{\"name\": \"Study Design 2\", \"description\": \"A secondary design for the study\"}|\r\n                ~> |blindingSchema.standardCode|{\"code\": \"C49659\", \"decode\": \"OPEN LABEL\"}|;\r\n    $old_sdid := $old_study.study.versions[0].studyDesigns[0].id;\r\n    $new_study1 := $old_study\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|\r\n                ~> |study.versions[0].roles[0]|{\"appliesToIds\": [$old_sdid]}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first role                            *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.study.versions[0].roles[0],$maxids);\r\n    $new_role := $utils.make_dup($new_study1.study.versions[0].roles[0],$idmap)\r\n                ~> |$|{\"name\": \"ROLE_2\", \"appliesToIds\": [$new_sd.id]},[\"masking\"]|;\r\n    $new_study2 := $new_study1 ~> |study.versions[0]|{\"roles\": $append(roles,$new_role)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00191/unit-test-coreid-DDF00191-positive.json\",$new_study2);\r\n    \r\n    /***********************************************************************\\\r\n    * Make the first role (which has masking) apply to the whole study      *\r\n    * version and write out as negative unit test data.                     *\r\n    \\***********************************************************************/\r\n    $new_study3 := $new_study2 ~> |study.versions[0].roles[0]|{\"appliesToIds\": [$old_study.study.versions[0].id]}|;\r\n    $writeFile(\"./rules/DDF00191/unit-test-coreid-DDF00191-negative.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00191/unit-test-coreid-DDF00191-positive.json\");\r\n    $utils.report($rule,$pos_data)\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00191/unit-test-coreid-DDF00191-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]