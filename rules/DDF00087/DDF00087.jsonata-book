[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/parse_refs.jsonata\")\r\n                 ,$import(\"./utils/del_reps.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00087/DDF00087.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point and add BC categories        *\r\n    \\***********************************************************************/\r\n\r\n    $old_study := $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design                    *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd1 := $utils.make_dup($old_study.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"Study Design 2\",\r\n                            \"description\": \"A secondary design for the study\"\r\n                        }|;\r\n    $new_study1 := $old_study\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design as an              *\r\n    * observational study design.                                           *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap2 := $utils.get_idmap($new_study1.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd2 := $utils.make_dup($new_study1.study.versions[0].studyDesigns[0],$idmap2)\r\n                ~> |$|{\r\n                        \"id\": \"ObservationalStudyDesign_1\",\r\n                        \"instanceType\": \"ObservationalStudyDesign\",\r\n                        \"name\": \"Study Design 4\",\r\n                        \"description\": \"An observational design for the study\",\r\n                        \"timePerspective\": (blindingSchema.standardCode ~> |$|{\"code\": \"C15273\",\"decode\": \"PROSPECTIVE\"}|)\r\n                      },[\"blindingSchema\",\"intentTypes\",\"subTypes\"]|\r\n                ~> |studyType|{\"code\": \"C16084\", \"decode\": \"OBSERVATIONAL\"}|\r\n                ~> |model|{\"code\": \"C15208\", \"decode\": \"COHORT\"}|;\r\n    $new_study2 := $new_study1\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd2)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00087/unit-test-coreid-DDF00087-positive.json\",$new_study2);\r\n    \r\n    /***********************************************************************\\\r\n    * Make the following updates then write out as negative unit test data: *\r\n    * - Reverse the defined order of the Baseline and Week 2 encounters in  *\r\n    *   the first study design (so referenced order will not match).        *\r\n    * - Change an encounterId referenced by a scheduled activity instance   *\r\n    *   in the second study design.                                         *\r\n    * - Remove reference to an epoch from scheduled activity instances in   *\r\n    *   the third study design.                                             *\r\n    \\***********************************************************************/\r\n    $new_study3 := $new_study2\r\n                    ~> |study.versions[0].studyDesigns[0].encounters[id=\"Encounter_2\"]|{\"nextId\": \"Encounter_4\"}|\r\n                    ~> |study.versions[0].studyDesigns[0].encounters[id=\"Encounter_4\"]|{\"nextId\": \"Encounter_3\", \"previousId\": \"Encounter_2\"}|\r\n                    ~> |study.versions[0].studyDesigns[0].encounters[id=\"Encounter_3\"]|{\"nextId\": \"Encounter_5\", \"previousId\": \"Encounter_4\"}|\r\n                    ~> |study.versions[0].studyDesigns[0].encounters[id=\"Encounter_5\"]|{\"previousId\": \"Encounter_3\"}|\r\n                    ~> |study.versions[0].studyDesigns[1].scheduleTimelines.instances[id=$lookup($idmap,\"ScheduledActivityInstance_15\")]|\r\n                       {\"encounterId\": $lookup($idmap,\"Encounter_5\")}|\r\n                    ~> |study.versions[0].studyDesigns[2].scheduleTimelines.instances[encounterId=$lookup($idmap2,\"Encounter_4\")]|\r\n                       {\"encounterId\": null}|;\r\n    $writeFile(\"./rules/DDF00087/unit-test-coreid-DDF00087-negative.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive dataset","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00087/unit-test-coreid-DDF00087-positive.json\");\r\n    $utils.report($rule,$pos_data)\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00087/unit-test-coreid-DDF00087-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]