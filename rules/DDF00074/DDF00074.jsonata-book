[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00074/DDF00074.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the positive test data for DDF00213 to create study interventions *\r\n    * by converting the v4 structure back to v3.                            *\r\n    \\***********************************************************************/\r\n\r\n    $213_study :=   $loadFile(\"./rules/DDF00213/unit-test-coreid-DDF00213-positive.json\");\r\n    $ii := 10000;\r\n    $sis := ($213_study.study.versions[0])@$sv.($sv.studyInterventions ~> $map(function($v){\r\n            $v ~> |$|\r\n                {\r\n                    \"productDesignation\":{\r\n                        \"id\": \"Code_xx\",\r\n                        \"code\": \"C202579\",\r\n                        \"codeSystem\": \"http://www.cdisc.org\",\r\n                        \"codeSystemVersion\": \"2024-09-27\",\r\n                        \"decode\": \"IMP\",\r\n                        \"instanceType\": \"Code\"\r\n                    },\r\n                    \"minimumResponseDuration\": minimumResponseDuration ~> |**|{},[\"extensionAttributes\"]|,\r\n                    \"administrations\":\r\n                        (\r\n                            $this := $;\r\n                            administrations\r\n                            ~> |$|  (\r\n                                        $a := $;\r\n                                        {\r\n                                            \"dose\": (\r\n                                                        $d := $sv.administrableProducts[id = $sv.medicalDevices[id = $a.medicalDeviceId].embeddedProductId].ingredients[role.decode = \"Active\"].substance.strengths[0].numerator;\r\n                                                        $d ? $d : {\"id\": \"Quantity_xx\",\"value\": 0,\"instanceType\": \"Quantity\"}\r\n                                                    ),\r\n                                            \"route\": {\r\n                                                \"id\": \"AliasCode_xx\",\r\n                                                \"standardCode\": {\r\n                                                    \"id\": \"Code_xx\",\r\n                                                    \"code\": \"C38305\",\r\n                                                    \"codeSystem\": \"http://www.cdisc.org\",\r\n                                                    \"codeSystemVersion\": \"2024-09-27\",\r\n                                                    \"decode\": \"TRANSDERMAL\",\r\n                                                    \"instanceType\": \"Code\"\r\n                                                },\r\n                                                \"standardCodeAliases\": [],\r\n                                                \"instanceType\": \"AliasCode\"\r\n                                            },\r\n                                            \"instanceType\": \"AgentAdministration\"\r\n                                        }\r\n                                    ),[\"administrableProductId\",\"medicalDeviceId\",\"notes\"]|\r\n                            ~> |duration|{\"instanceType\": \"AdministrationDuration\",\"description\": text, \"reasonDurationWillVary\": durationWillVary = false ? \"\"}|\r\n                        )\r\n                }|})\r\n            ~> |**[id]|{\"id\": $join([instanceType,$string($ii:=$ii+1)],\"_\")},[\"extensionAttributes\",\"notes\"]|);\r\n\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study_v3.json\");\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($sis,$maxids);\r\n    $new_sis := $utils.make_dup($sis,$idmap);\r\n    $new_study := $old_study\r\n                  ~> |study.versions[0].studyDesigns[0]|{\"studyInterventions\": $new_sis}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design                    *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study);\r\n    $idmap := $utils.get_idmap($new_study.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($new_study.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"Study Design 2\",\r\n                            \"description\": \"A secondary design for the study\",\r\n                            \"arms\": [arms[1]]\r\n                        }|\r\n                ~> |$|{\"studyCells\": ($this := $; studyCells[armId in $this.arms.id])}|\r\n                ~> |$|{\"elements\": ($this := $; elements[id in $this.studyCells.elementIds])}|\r\n                ~> |interventionModel|{\"code\": \"C82640\", \"decode\": \"SINGLE GROUP\"}|;\r\n    $new_study1 :=  $new_study\r\n                    ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,[$new_sd ~> |$|{\"studyInterventions\": []}|])}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design                    *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd1 := $utils.make_dup($new_study1.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"Study Design 3\",\r\n                            \"description\": \"A tertiary design for the study\",\r\n                            \"arms\": [arms[2]]\r\n                        }|\r\n                ~> |$|{\"studyCells\": ($this := $; studyCells[armId in $this.arms.id])}|\r\n                ~> |$|{\"elements\": ($this := $; elements[id in $this.studyCells.elementIds])}|\r\n                ~> |interventionModel|{\"code\": \"C82640\", \"decode\": \"SINGLE GROUP\"}|\r\n                ~> |elements[name in [\"EL4\",\"EL6\"]]|{\"studyInterventionIds\": [$lookup($idmap,$new_sis[name=\"SI_XAN_LO\"].id)]}|\r\n                ~> |elements[name = \"EL5\"]|{\"studyInterventionIds\": [$lookup($idmap,$new_sis[name=\"SI_XAN_HI\"].id)]}|;\r\n    $new_study2 := $new_study1\r\n                    ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd1)}|\r\n                    ~> |study.versions[0].studyDesigns[0]|{\"studyInterventions\": [studyInterventions[name=\"SI_XAN_HI\"]]}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as negative unit test data (refs to study interventions are *\r\n    * missing from the original example data). Only the first study design  *\r\n    * is expected to be reported.                                           *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00074/unit-test-coreid-DDF00074-negative.json\",$new_study2);\r\n    \r\n    /***********************************************************************\\\r\n    * Add the refs to study interventions to one of the activities and      *\r\n    * write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $si_ids := $new_study2.study.versions[0].studyDesigns[0].studyInterventions.id[];\r\n\r\n    $maxids := $utils.get_maxids($new_study2);\r\n    $idmap := $utils.get_idmap($new_study2.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$maxids);\r\n    $new_dp1 := $utils.make_dup($new_study2.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"PR_DISP\",\r\n                            \"label\": \"Medications dispensed\",\r\n                            \"description\": \"Medications dispensed\",\r\n                            \"procedureType\": \"Disposition\",\r\n                            \"studyInterventionId\": $si_ids[0]\r\n                        }| \r\n                ~> |code|{\"code\": \"373784005\", \"decode\": \"Dispensing medication\"}|;\r\n    $new_study3 :=  $new_study2\r\n                    ~> |study.versions[0].studyDesigns[0].activities[id=\"Activity_25\"]|\r\n                        {\r\n                            \"definedProcedures\"[]: [$new_dp1]\r\n                        }|;\r\n                        \r\n    $maxids := $utils.get_maxids($new_study3);\r\n    $idmap := $utils.get_idmap($new_study3.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$maxids);\r\n    $new_dp2 := $utils.make_dup($new_study3.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"PR_RECON\",\r\n                            \"label\": \"Medications reconciliation\",\r\n                            \"description\": \"Medications reconciliation\",\r\n                            \"procedureType\": \"Disposition\",\r\n                            \"studyInterventionId\": $si_ids[0]\r\n                        }| \r\n                ~> |code|{\"code\": \"430193006\", \"decode\": \"Medication reconciliation\"}|;\r\n    $new_study4 :=  $new_study3\r\n                ~> |study.versions[0].studyDesigns[0]|{\"studyInterventions\": $new_sis}|\r\n                ~> |study.versions[0].studyDesigns[0].elements[name = \"EL2\"]|{\"studyInterventionIds\": [$new_sis[name=\"SI_PLAC\"].id]}|\r\n                ~> |study.versions[0].studyDesigns[0].elements[name in [\"EL3\",\"EL4\",\"EL6\"]]|{\"studyInterventionIds\": [$new_sis[name=\"SI_XAN_LO\"].id]}|\r\n                ~> |study.versions[0].studyDesigns[0].elements[name = \"EL5\"]|{\"studyInterventionIds\": [$new_sis[\"SI_XAN_HI\"].id]}|\r\n                ~> |study.versions[0].studyDesigns[1]|{\"studyInterventions\": [$new_sd.studyInterventions[name=\"SI_XAN_LO\"]]}|\r\n                ~> |study.versions[0].studyDesigns[1].elements[name = \"EL3\"]|{\"studyInterventionIds\": [$new_sd.studyInterventions[name=\"SI_XAN_LO\"].id]}|\r\n                ~> |study.versions[0].studyDesigns[2]|{\"studyInterventions\": [$new_sd1.studyInterventions[name=\"SI_XAN_HI\"]]}|\r\n                ~> |study.versions[0].studyDesigns[2].elements[name in [\"EL4\",\"EL6\"]]|{\"studyInterventionIds\": [$new_sd1.studyInterventions[name=\"SI_XAN_HI\"].id]}|\r\n                    ~> |study.versions[0].studyDesigns[0].activities[id=\"Activity_25\"]|\r\n                        {\r\n                            \"definedProcedures\"[]: $append(definedProcedures,$new_dp2)\r\n                        }|;\r\n                        \r\n    $writeFile(\"./rules/DDF00074/unit-test-coreid-DDF00074-positive.json\",$new_study4);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00074/unit-test-coreid-DDF00074-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00074/unit-test-coreid-DDF00074-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]