[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00050/DDF00050.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study := $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a second study design as a copy of the first        *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.**.studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($old_study.**.studyDesigns[0],$idmap) ~> |$|\r\n        {\r\n            \"name\": \"Study Design 2\"\r\n        }|;\r\n    $new_study1 := $old_study ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create a copy of the first study design's population and insert it as *\r\n    * the first cohort for the (new) second study design.                   *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.**.studyDesigns[0].population,$maxids);\r\n    $new_cohort1 := $utils.make_dup($new_study1.**.studyDesigns[0].population,$idmap) ~> |$|\r\n        {\r\n            \"id\": \"StudyCohort_1\",\r\n            \"name\": \"COHORT1\",\r\n            \"instanceType\": \"StudyCohort\"\r\n        },[\"plannedSex\",\"plannedEnrollmentNumber\",\"plannedCompletionNumber\",\"criterionIds\",\"cohorts\"]| ~> |plannedAge.maxValue|{\"value\": 75}|;\r\n    $new_study2 := $new_study1 ~> |study.versions[0].studyDesigns[1].population|{\"cohorts\": $append(cohorts,$new_cohort1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Duplicate the cohort created in the previous step to create the       *\r\n    * second cohort for the (new) second study design.                      *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study2);\r\n    $idmap := $utils.get_idmap($new_study2.**.studyDesigns[1].population.cohorts[0],$maxids);\r\n    $new_cohort2 := $utils.make_dup($new_study2.**.studyDesigns[1].population.cohorts[0],$idmap) ~> |$|\r\n        {\r\n            \"name\": \"COHORT2\"\r\n        }| ~> |plannedAge.minValue|{\"value\": 76}| ~> |plannedAge.maxValue|{\"value\": 100}|;\r\n    $new_study3 := $new_study2 \r\n                    ~> |study.versions[0].studyDesigns[1].population|{\"cohorts\": $append(cohorts,$new_cohort2)},[\"plannedAge\"]|;\r\n                    \r\n    /***********************************************************************\\\r\n    * Add correct population references to the arms in the first and second *\r\n    * study designs and write out as positive unit test data.               *\r\n    \\***********************************************************************/\r\n    $pop1_id := [$new_study3.study.versions[0].studyDesigns[0].population.id];\r\n    $cohort_ids := $new_study3.study.versions[0].studyDesigns[1].population.cohorts.id;\r\n    $new_study4 := $new_study3 ~> |study.versions[0].studyDesigns[0].arms[id]|{\"populationIds\": $pop1_id}|\r\n                               ~> |study.versions[0].studyDesigns[1].arms[[1,2]]|{\"populationIds\": $cohort_ids}|;\r\n    $writeFile(\"./rules/DDF00050/unit-test-coreid-DDF00050-positive.json\",$new_study4);\r\n    \r\n    /***********************************************************************\\\r\n    * Add incorrect population references to the arms in the first and      *\r\n    * second study designs and write out as negative unit test data.        *\r\n    \\***********************************************************************/\r\n    $pop2_id := [$new_study3.study.versions[0].studyDesigns[1].population.id];\r\n    $new_study5 := $new_study3 ~> |study.versions[0].studyDesigns[0].arms[0]|{\"populationIds\": $pop2_id}|\r\n                               ~> |study.versions[0].studyDesigns[0].arms[1]|{\"populationIds\": [$pop1_id,$cohort_ids[0]]}|\r\n                               ~> |study.versions[0].studyDesigns[0].arms[2]|{\"populationIds\": $append($cohort_ids,[\"StudyCohort_xx\"])}|\r\n                               ~> |study.versions[0].studyDesigns[1].arms[0]|{\"populationIds\": [$pop1_id,$cohort_ids]}|;\r\n    $writeFile(\"./rules/DDF00050/unit-test-coreid-DDF00050-negative.json\",$new_study5);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00050/unit-test-coreid-DDF00050-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00050/unit-test-coreid-DDF00050-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n\r\n)","outputs":[]}]