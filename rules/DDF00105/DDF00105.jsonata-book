[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00105/DDF00105.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create a scheduled decision instance as a modified copy of a          *\r\n    * scheduled activity instance and insert it into the timeline           *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $old_sai := $old_study.**.studyDesigns[0].scheduleTimelines[0].instances[id=\"ScheduledActivityInstance_12\"];\r\n    $idmap := $utils.get_idmap($old_sai,$maxids);\r\n    $new_sdi := $utils.make_dup($old_sai,$idmap)\r\n                ~> |$|  {\r\n                            \"id\": \"ScheduledDecisionInstance_1\",\r\n                            \"name\": \"DOWK2\",\r\n                            \"label\": \"Do week 2?\",\r\n                            \"defaultConditionId\": $old_sai.id,\r\n                            \"epochId\": null,\r\n                            \"conditionAssignments\": [\r\n                                {\r\n                                    \"id\": \"ConditionAssignment_1\",\r\n                                    \"condition\": \"Can skip week 2\",\r\n                                    \"conditionTargetId\": $old_sai.defaultConditionId,\r\n                                    \"instanceType\": \"ConditionAssignment\"\r\n                                }\r\n                            ],\r\n                            \"instanceType\": \"ScheduledDecisionInstance\"\r\n                        },['activityIds','encounterId','timelineId','timelineExitId']|;\r\n    $new_study1 :=  $old_study\r\n                    ~> |study.versions[0].studyDesigns[0].scheduleTimelines[0]|{\"instances\": $append(instances,$new_sdi)}|\r\n                    ~> |study.versions[0].studyDesigns[0].scheduleTimelines[0].instances[defaultConditionId=$old_sai.id]|{\"defaultConditionId\": $new_sdi.id}|;\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a second study design as a copy of the first        *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.**.studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($new_study1.**.studyDesigns[0],$idmap);\r\n    $new_study2 :=  $new_study1\r\n                    ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00105/unit-test-coreid-DDF00105-positive.json\",$new_study2);\r\n    \r\n    /***********************************************************************\\\r\n    * Add invalid childIds to the new activity in the first study design    *\r\n    * (including the id of an activity from the second study design and an  *\r\n    * non-existent id value) and write out as negative unit test data.       *\r\n    \\***********************************************************************/\r\n    $new_study3 :=  $new_study2\r\n                    ~> |study.versions[0].studyDesigns[1].scheduleTimelines[0].instances[0]\r\n                       |{\"epochId\": $old_sai.epochId}|\r\n                    ~> |study.versions[0].studyDesigns[1].scheduleTimelines[0].instances[-1]\r\n                       |{\"epochId\": \"StudyEpoch_xx\"}|;\r\n    $writeFile(\"./rules/DDF00105/unit-test-coreid-DDF00105-negative.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00105/unit-test-coreid-DDF00105-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00105/unit-test-coreid-DDF00105-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]