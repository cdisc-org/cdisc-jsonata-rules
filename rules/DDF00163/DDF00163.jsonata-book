[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00163/DDF00163.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a new version for the first study definition        *\r\n    * document in which:                                                    *\r\n    * - the contentItemId for the 1st content with childIds is set to null  *\r\n    * - the contentItemId for the 2nd content with childIds is set to \"\"    *\r\n    * (to show that contents with only childIds are OK) and remove the      *\r\n    * second study definition document (which is a representation of the    *\r\n    * M11 template without any content).                                    *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.documentedBy[0].versions[0],$maxids);\r\n    $new_sddv := $utils.make_dup($old_study.study.documentedBy[0].versions[0],$idmap)\r\n                ~> |$|  {\"version\": \"3\"}|\r\n                ~> |$.contents[childIds][0]|{\"contentItemId\": null}|\r\n                ~> |$.contents[childIds][1]|{\"contentItemId\": \"\"}|;\r\n    $new_study1 :=  $old_study\r\n                    ~> |study|{\"documentedBy\": [documentedBy[0] ~> |$|{\"versions\": $append(versions,$new_sddv)}|]}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00163/unit-test-coreid-DDF00163-positive.json\",$new_study1);\r\n    \r\n    /***********************************************************************\\\r\n    * Make the following changes and then write out as negative unit test   *\r\n    * data:                                                                 *\r\n    * - Set contentItemId to null for the first content without childIds in *\r\n    *   the first version of the first document                             *\r\n    * - Set contentItemId to \"\" for the last content without childIds in    *\r\n    *   the second version of the first document                            *\r\n    * - Remove the contentItem and childIds attributes for the first        *\r\n    *   content with childIds in the second version of the first document   *\r\n    * - Set contentItemId to null and remove the childIds attribute for the *\r\n    *   last content with childIds in the second version of the first       *\r\n    *   document                                                            *\r\n    \\***********************************************************************/\r\n    $new_study2 :=  $new_study1\r\n                    ~> |study.documentedBy[0].versions[0].contents[$not(childIds)][0]|{\"contentItemId\": null}|\r\n                    ~> |study.documentedBy[0].versions[1].contents[$not(childIds)][-1]|{\"contentItemId\": \"\"}|\r\n                    ~> |study.documentedBy[0].versions[0].contents[childIds][0]|{},[\"contentItemId\",\"childIds\"]|\r\n                    ~> |study.documentedBy[0].versions[1].contents[childIds][-1]|{\"contentItemId\": null},[\"childIds\"]|;\r\n    $writeFile(\"./rules/DDF00163/unit-test-coreid-DDF00163-negative.json\",$new_study2);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00163/unit-test-coreid-DDF00163-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00163/unit-test-coreid-DDF00163-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]