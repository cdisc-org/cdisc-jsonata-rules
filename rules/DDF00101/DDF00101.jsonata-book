[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00101/DDF00101.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a copy of the first study design as an              *\r\n    * observational study design.                                           *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.study.versions[0].studyDesigns[0],$maxids);\r\n    $new_sd1 := $utils.make_dup($old_study.study.versions[0].studyDesigns[0],$idmap)\r\n                ~> |$|{\r\n                        \"id\": \"ObservationalStudyDesign_1\",\r\n                        \"instanceType\": \"ObservationalStudyDesign\",\r\n                        \"name\": \"Study Design 2\",\r\n                        \"description\": \"An observational design for the study\",\r\n                        \"timePerspective\": (blindingSchema ~> |standardCode|{\"code\": \"C15273\",\"decode\": \"PROSPECTIVE\"}|)\r\n                      },[\"blindingSchema\",\"intentTypes\",\"subTypes\"]|\r\n                ~> |studyType|{\"code\": \"C16084\", \"decode\": \"OBSERVATIONAL\"}|\r\n                ~> |model|{\"code\": \"C15208\", \"decode\": \"COHORT\"}|;\r\n    $new_study1 := $old_study\r\n                ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd1)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as negative unit test data (refs to study interventions are *\r\n    * missing from the original example data). Only the first study design  *\r\n    * is expected to be reported.                                           *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00101/unit-test-coreid-DDF00101-negative.json\",$old_study);\r\n    \r\n    /***********************************************************************\\\r\n    * Add the refs to study interventions to one of the activities and      *\r\n    * write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $si_ids := $new_study1.study.versions[0].studyInterventions.id[];\r\n\r\n    $maxids := $utils.get_maxids($new_study1);\r\n    $idmap := $utils.get_idmap($new_study1.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$maxids);\r\n    $new_dp1 := $utils.make_dup($new_study1.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"PR_DISP\",\r\n                            \"label\": \"Medications dispensed\",\r\n                            \"description\": \"Medications dispensed\",\r\n                            \"procedureType\": \"Disposition\",\r\n                            \"studyInterventionId\": $si_ids[0]\r\n                        }| \r\n                ~> |code|{\"code\": \"373784005\", \"decode\": \"Dispensing medication\"}|;\r\n    $new_study2 :=  $new_study1\r\n                    ~> |study.versions[0].studyDesigns[0].activities[id=\"Activity_25\"]|\r\n                        {\r\n                            \"definedProcedures\"[]: [$new_dp1]\r\n                        }|;\r\n                        \r\n    $maxids := $utils.get_maxids($new_study2);\r\n    $idmap := $utils.get_idmap($new_study2.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$maxids);\r\n    $new_dp2 := $utils.make_dup($new_study2.study.versions[0].studyDesigns[0].activities[id=\"Activity_18\"].definedProcedures[0],$idmap)\r\n                ~> |$|  {\r\n                            \"name\": \"PR_RECON\",\r\n                            \"label\": \"Medications reconciliation\",\r\n                            \"description\": \"Medications reconciliation\",\r\n                            \"procedureType\": \"Disposition\",\r\n                            \"studyInterventionId\": $si_ids[0]\r\n                        }| \r\n                ~> |code|{\"code\": \"430193006\", \"decode\": \"Medication reconciliation\"}|;\r\n    $new_study3 :=  $new_study2\r\n                    ~> |study.versions[0].studyDesigns[0].activities[id=\"Activity_25\"]|\r\n                        {\r\n                            \"definedProcedures\"[]: $append(definedProcedures,$new_dp2)\r\n                        }|;\r\n                        \r\n    $writeFile(\"./rules/DDF00101/unit-test-coreid-DDF00101-positive.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00101/unit-test-coreid-DDF00101-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00101/unit-test-coreid-DDF00101-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]