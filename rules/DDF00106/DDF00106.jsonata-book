[{"kind":1,"language":"markdown","value":"Import utility functions","outputs":[]},{"kind":2,"language":"jsonata","value":"$utils := $merge([$import(\"./utils/get_idmap.jsonata\")\r\n                 ,$import(\"./utils/get_maxids.jsonata\")\r\n                 ,$import(\"./utils/make_dup.jsonata\")\r\n                 ,$import(\"./utils/get_rule.jsonata\")\r\n                 ,$import(\"./utils/report.jsonata\")]) ","outputs":[]},{"kind":1,"language":"markdown","value":"Define test","outputs":[]},{"kind":2,"language":"jsonata","value":"$rule := $utils.get_rule($import(\"./rules/DDF00106/DDF00106.json\"))","outputs":[]},{"kind":1,"language":"markdown","value":"Create test data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    /***********************************************************************\\\r\n    * Use the CDISC Pilot data as a start point                             *\r\n    \\***********************************************************************/\r\n\r\n    $old_study :=   $loadFile(\"./testdata/CDISC_Pilot_Study.json\");\r\n\r\n    /***********************************************************************\\\r\n    * Create and insert a second study design as a copy of the first        *\r\n    \\***********************************************************************/\r\n    $maxids := $utils.get_maxids($old_study);\r\n    $idmap := $utils.get_idmap($old_study.**.studyDesigns[0],$maxids);\r\n    $new_sd := $utils.make_dup($old_study.**.studyDesigns[0],$idmap);\r\n    $new_study1 :=  $old_study\r\n                    ~> |study.versions[0]|{\"studyDesigns\": $append(studyDesigns,$new_sd)}|;\r\n\r\n    /***********************************************************************\\\r\n    * Write out as positive unit test data.                                 *\r\n    \\***********************************************************************/\r\n    $writeFile(\"./rules/DDF00106/unit-test-coreid-DDF00106-positive.json\",$new_study1);\r\n    \r\n    /***********************************************************************\\\r\n    * Add non-compliant encounterId values:                                 *\r\n    * - 1st instance in 1st timeline in 2nd study design: encounterId from  *\r\n    *   1st study design                                                    *\r\n    * - Last instance in 1st timeline in 2nd study design: invalid          *\r\n    *   encounterId.                                                        *\r\n    \\***********************************************************************/\r\n    $new_study3 :=  $new_study1\r\n                    ~> |study.versions[0].studyDesigns[1].scheduleTimelines[0].instances[0]\r\n                       |{\"encounterId\": $new_study1.study.versions[0].studyDesigns[0].scheduleTimelines[0].instances[0].encounterId}|\r\n                    ~> |study.versions[0].studyDesigns[1].scheduleTimelines[0].instances[-1]\r\n                       |{\"encounterId\": \"Encounter_xx\"}|;\r\n    $writeFile(\"./rules/DDF00106/unit-test-coreid-DDF00106-negative.json\",$new_study3);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test positive data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $pos_data := $loadFile(\"./rules/DDF00106/unit-test-coreid-DDF00106-positive.json\");\r\n    $utils.report($rule,$pos_data);\r\n)","outputs":[]},{"kind":1,"language":"markdown","value":"Test negative data","outputs":[]},{"kind":2,"language":"jsonata","value":"(\r\n    $neg_data := $loadFile(\"./rules/DDF00106/unit-test-coreid-DDF00106-negative.json\");\r\n    $utils.report($rule,$neg_data)\r\n)","outputs":[]}]